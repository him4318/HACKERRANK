#include <bits/stdc++.h>

using namespace std;

typedef long long int64;
const int64 INF = 1LL << 55;

template< class T >
struct BinaryIndexedTree
{
  vector< T > data;

  BinaryIndexedTree(int sz)
  {
    data.assign(++sz, 0);
  }

  T sum(int k)
  {
    T ret = 0;
    for(++k; k > 0; k -= k & -k) ret += data[k];
    return (ret);
  }

  void add(int k, T x)
  {
    for(++k; k < data.size(); k += k & -k) data[k] += x;
  }
};


int main()
{
  int N, M, K;
  scanf("%d %d %d", &N, &M, &K);

  int64 A[100005], B[5], L[100005], R[100005], X[100005];
  int64 all = 0;

  for(int i = 0; i < N; i++) {
    scanf("%lld", &A[i]);
    all += A[i];
  }

  for(int i = 0; i < K; i++) {
    scanf("%lld", &B[i]);
  }
  sort(B, B + K);

  for(int i = 0; i < M; i++) {
    scanf("%lld %lld %lld", &L[i], &R[i], &X[i]);
    --L[i];
  }

  L[M] = 0, R[M] = N, X[M] = INF;
  ++M;


  int64 rocked[100005];
  memset(rocked, -1, sizeof(rocked));
  for(int i = 0; i < N; i++) {
    for(int j = 0; j < K; j++) {
      if(A[i] == B[j]) rocked[i] = 0;
    }
  }

  for(int i = 0; i < K; i++) {
    vector< int > LL(N, 0), RR(N, M - 1);

    for(int j = 0; j < 25; j++) {
      vector< pair< int, int > > qs;
      for(int k = 0; k < N; k++) {
        qs.emplace_back((LL[k] + RR[k]) / 2, k);
      }
      sort(begin(qs), end(qs));

      BinaryIndexedTree< int64 > bit(N + 14);
      for(int k = 0; k < N; k++) {
        bit.add(k, A[k]);
        bit.add(k + 1, -A[k]);
      }

      int tail = 0;
      for(int k = 0; k < M; k++) {
        bit.add(L[k], X[k]);
        bit.add(R[k], -X[k]);
        while(tail < qs.size() && qs[tail].first == k) {
          auto &p = qs[tail];
          int64 sumsum = bit.sum(p.second);
          if(rocked[p.second] == -1 && sumsum == B[i]) rocked[p.second] = k + 1;
          if(sumsum >= B[i]) RR[p.second] = k;
          else LL[p.second] = k + 1;
          ++tail;
        }
      }
    }
  }

  vector< int > rev[100005];
  for(int i = 0; i < N; i++) {
    if(~rocked[i]) rev[rocked[i]].push_back(i);
  }

  BinaryIndexedTree< int > bit(N);
  for(int i = 0; i < M - 1; i++) {
    for(auto &r : rev[i]) bit.add(r, 1);
    all += 1LL * (R[i] - L[i]) * X[i];
    all -= 1LL * (bit.sum(R[i] - 1) - bit.sum(L[i] - 1)) * X[i];
    cout << all << endl;
  }


}
